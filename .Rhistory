save.image()
tmp = read.delim(file = "./data/latest/FI_T3.txt",header = T)
library(dplyr)
install.packages(c("deldir", "erer", "mgcv", "RcppArmadillo"))
library(dplyr)
head(tmp)
tmp %>% filter(stkcd==2,Accper='2012-12-31')
tmp %>% filter(stkcd==2,Accper=='2012-12-31')
tmp %>% filter(Stkcd==2,Accper=='2012-12-31')
rm(tmp)
source('~/Documents/second_article_new/creative/load_data.R')
rm(load_DEA_data)
rm(load_feature_data)
rm(load_ST_data)
source('~/Documents/second_article_new/creative/load_data.R')
rm(dea_data)
rm(feature_data)
rm(feature_DEA_data)
dea_data = load_DEA_data()
head(dea_data)
head(dea_data)
rm(dea_data)
rm(list = ls())
source('~/Documents/second_article_new/creative/load_data.R')
feature_data = load_feature_data()
setwd("../")
setwd("../")
setwd("./second_article_new/")
feature_data = load_feature_data()
source('~/Documents/second_article_new/creative/load_data.R')
feature_data = load_feature_data()
setwd("../../")
feature_data = load_feature_data()
source('~/Documents/second_article_new/creative/load_data.R')
setwd("../../")
feature_data = load_feature_data()
warnings()
rm(feature_data)
source('~/Documents/second_article_new/creative/load_data.R')
feature_data = load_feature_data()
dea_data = load_DEA_data()
tmp = load_ST_data(pat = "Implement")
setwd("../")
tmp = load_ST_data(pat = "Implement")
myfile = "./data/iFinD20140327/Implement_ST_1998_2014.csv"
st_data = read.csv(file = myfile,header = T,fileEncoding = 'UTF-8')
tmp = read.csv("./data/iFinD20140327/Implement_ST_1998_2014.csv")
tmp = read.csv("./data/iFinD20140327/Implement_ST_1998_2014.csv")
rm(st_data)
head(tmp)
myfile = "./data/iFinD20140327/Implement_ST_1998_2014.csv"
st_data = read.csv(file = myfile,header = T,fileEncoding = 'UTF-8')
rm(tmp)
unique(lubridate::year(dea_data[,2]))
length(st_data[1,1])
st_data[1,1]
strtrim(c("abcdef", "abcdef", "abcdef"), c(1,5,10))
strtrim(st_data[1,1],6)
names(st_data)
ST_new = data.frame(Stkcd = strtrim(st_data[,1],6),
ImplementYear = lubridate::year(st_data[,3]),
Would_be_ST = "YES")
Stkcd = strtrim(st_data[,1],6)
st_data[,3]
lubridate::year(st_data[1,3])
lubridate::year(st_data[640,3])
ST_new = data.frame(Stkcd = strtrim(st_data[,1],6),
ImplementYear = lubridate::year(st_data[,3]),
Would_be_ST = "YES")
myfile = "./data/iFinD20140327/Implement_ST_1998_2014.csv"
st_data = read.csv(file = myfile,header = T,fileEncoding = 'UTF-8')
ST_new = data.frame(Stkcd = strtrim(st_data[,1],6),
ImplementYear = lubridate::year(st_data[,3]),
Would_be_ST = "YES")
rm(st_data)
rm(myfile)
rm(Stkcd)
str(ST_new)
strtrim("000123",6)
ST_new[,1]
ST_new = ST_new %>%
mutate(year = ImplementYear - 3)
rm(ST_new)
st_data = load_DEA_data()
rm(st_data)
source('~/Documents/second_article_new/creative/load_data.R')
setwd("../")
st_data = load_ST_data()
head(st_data)
feature_DEA_data = dea_data %>%
inner_join(feature_data) %>%
mutate(year = lubridate::year(Accper))%>%
select(-Accper)
dea_and_features_data = feature_DEA_data
col_num_near_zero_var = nearZeroVar(dea_and_features_data)
require(caret)
require(caret)
col_num_near_zero_var = nearZeroVar(dea_and_features_data)
col_num_near_zero_var
names(dea_and_features_data)
feature_DEA_data = dea_data %>%
inner_join(feature_data) %>%
mutate(year = lubridate::year(Accper))%>%
select(-Accper,-Indcd,-Typrep)
dea_and_features_data = feature_DEA_data
col_num_near_zero_var = nearZeroVar(dea_and_features_data)
if(length(col_num_near_zero_var) != 0)
dea_and_features_data = dea_and_features_data[,-col_num_near_zero_var]
large_cor = findCorrelation(cor(dea_and_features_data),cutoff = 0.7)
names(dea_and_features_data)
large_cor = findCorrelation(cor(dea_and_features_data[,-1]),cutoff = 0.7)
apply(X = dea_and_features_data,MARGIN = 2,FUN = class)
apply(X = dea_data,MARGIN = 2,FUN = class)
source('~/Documents/second_article_new/creative/load_data.R')
rm(list = ls(pattern = "data"))
source('~/Documents/second_article_new/creative/load_data.R')
dea_data = load_DEA_data()
st_data = load_ST_data()
feature_data = load_feature_data()
apply(X = dea_data,MARGIN = 2,FUN = class)
tmp = sapply(dea_data[,3:ncol(dea_data)],as.numeric)
apply(X = tmp,MARGIN = 2,FUN = class)
rm(list = ls())
source('~/Documents/second_article_new/creative/load_data.R')
dea_data = load_DEA_data()
st_data = load_ST_data()
feature_data = load_feature_data()
apply(X = dea_data,MARGIN = 2,FUN = class)
names(dea_data)
apply(X = feature_data_data,MARGIN = 2,FUN = class)
apply(X = feature_data,MARGIN = 2,FUN = class)
rm(list = ls())
dea_data = load_DEA_data()
st_data = load_ST_data()
system.time(feature_data <- load_feature_data())
source('~/Documents/second_article_new/creative/load_data.R')
dea_data = load_DEA_data()
st_data = load_ST_data()
system.time(feature_data <- load_feature_data())
apply(X = feature_data_data,MARGIN = 2,FUN = class)
apply(X = feature_data,MARGIN = 2,FUN = class)
apply(X = dea_data,MARGIN = 2,FUN = class)
dea_data[,3:ncol(dea_data)] = sapply(dea_data[,3:ncol(dea_data)],as.numeric)
apply(X = dea_data,MARGIN = 2,FUN = class)
apply(X = feature_data_data,MARGIN = 2,FUN = class)
apply(X = feature_data,MARGIN = 2,FUN = class)
#合并feature_data 和 dea_data
feature_DEA_data = dea_data %>%
inner_join(feature_data) %>%
mutate(year = lubridate::year(Accper))%>%
select(-Accper,-Indcd,-Typrep)
names(feature_DEA_data)
class(feature_DEA_data$year)
names(feature_DEA_data)
feature_DEA_data[,2:ncol(feature_DEA_data)] = apply(X = feature_DEA_data[,2:ncol(feature_DEA_data)],MARGIN = 2,FUN = as.numeric)
apply(feature_DEA_data,MARGIN = 2,FUN = class)
for(i in 2:ncol(feature_DEA_data))
{
feature_DEA_data[,i] = as.numeric(feature_DEA_data[,i])
}
apply(feature_DEA_data,MARGIN = 2,FUN = class)
as.numeric(feature_DEA_data[,2])
as.numeric(feature_DEA_data[,2]) -> tmp
Stkcd = feature_DEA_data[,1]
puredata = as.numeric(feature_DEA_data[,-1])
puredata = apply(feature_data[,-1],MARGIN = 2,as.numeric)
names(puredata)
apply(puredata,MARGIN = 2,class)
puredata = apply(feature_DEA_data[,-1],MARGIN = 2,as.numeric)
names(puredata)
Stkcd = feature_DEA_data[,1]
year = feature_DEA_data[,ncol(feature_DEA_data)]
ml_dea = feature_DEA_data[,-c(1,ncol(feature_DEA_data))]
ml_dea_names = names(ml_dea)
ml_dea = apply(ml_dea,2,as.numeric)
dea_and_features_data = cbind(Stkcd,year,ml_dea)
names(dea_and_features_data)
head(dea_and_features_data)
ml_dea = as.data.frame(ml_dea)
names(ml_dea) = ml_dea_names
dea_and_features_data = cbind(Stkcd,year,ml_dea)
apply(dea_and_features_data,2,class)
apply(ml_dea,2,class)
dea_and_features_data = ml_dea
dea_and_features_data$Stkcd = Stkcd
dea_and_features_data$year = year
rm(ml_dea)
rm(puredata)
gc()
apply(X = dea_and_features_data,MARGIN = 2,class)
Stkcd = feature_DEA_data[,1]
year = feature_DEA_data[,ncol(feature_DEA_data)]
ml_dea = feature_DEA_data[,-c(1,ncol(feature_DEA_data))]
ml_dea_names = names(ml_dea)
ml_dea = apply(ml_dea,2,as.numeric)
apply(X = ml_dea,MARGIN = 2,class)
ml_dea = as.data.frame(ml_dea)
apply(X = ml_dea,MARGIN = 2,class)
names(ml_dea)
rm(ml_dea)
year = feature_DEA_data[,ncol(feature_DEA_data)]
ml_dea = feature_DEA_data[,-c(1,ncol(feature_DEA_data))]
ml_dea_names = names(ml_dea)
ml_dea = apply(ml_dea,2,as.numeric)
ml_dea = as.data.frame(ml_dea)
apply(ml_dea,2,class)
dea_and_features_data = ml_dea
dea_and_features_data$Stkcd = Stkcd
dea_and_features_data$year = year
append(dea_and_features_data,2,class)
apply(dea_and_features_data,2,class)
class(Stkcd)
class(year)
class(dea_and_features_data)
source('~/Documents/second_article_new/creative/mytrainv2.R')
if(!file.exists("./cache/corps_with_eff.RDS"))
{
source("./creative/get_corps_with_eff.r")
source("./creative/sbm.gurobi.r")
system.time(corps_with_eff <- get_corps_with_eff(corps))
corps_with_eff = corps_with_eff[corps_with_eff$eff>0,]
}else
corps_with_eff = readRDS("./cache/corps_with_eff.RDS")
#使用第三种取样的方法，取得样本
source("./creative/getSamples2.r")
source("./creative/getSamples3.R")
rfdata = getSample2(corps_with_eff)
#rfdata = getSamples3(corps_with_eff)
#     if(!file.exists("./cache/feature_selection_model.RDS"))
#     {
#         source("./creative/select_feature.r")
#         system.time(feature_selection_model <- select_feature(rfdata))
#     }else{
#         feature_selection_model = readRDS("./cache/feature_selection_model.RDS")
#     }
# print(feature_selection_model)
# plot(feature_selection_model,type = c('o','g'))
source("./creative/select_feature.r")
feature_selection_results = list()
for(ind in 1:1)
{
rfdata = getSample2(corps_with_eff)
feature_selection_model <- select_feature(rfdata)
tmp = list()
tmp$optVariables = feature_selection_model$optVariables
tmp$optsize = feature_selection_model$optsize
feature_selection_results[[ind]] = tmp
}
optvariables_list = lapply(X = feature_selection_results,function(x){x[[1]]})
optvariables = do.call(cbind,optvariables_list)
vars5 = lapply(optvariables_list,function(x)x[1:5])
vars10 = lapply(optvariables_list,function(x)x[1:10])
top5vars = Reduce(dplyr::intersect,vars5)
top10vars = Reduce(dplyr::intersect,vars10)
source("./creative/mytrainv2.R")
svmRadial = mytrainv2(num_vars = top5vars,rfdata = rfdata,method = "svmRadial")
resamples
top3vars = feature_selection_model$optVariables[1:3]
top5vars = feature_selection_model$optVariables[1:5]
top10vars = feature_selection_model$optVariables[1:10]
source("./creative/myRandomForest.R")
source("./creative/mysvm.r")
source("./creative/myNaiveBayes.r")
# randomForest3vars = myRandomForest(num_vars = top3vars,rfdata)
# randomForest5vars = myRandomForest(num_vars = top5vars,rfdata)
# randomForest10vars = myRandomForest(num_vars = top10vars,rfdata)
###Random Forest
if(!file.exists("./cache/randomForest3vars.RDS"))
{
randomForest3vars = myrandomForest(num_vars = top3vars,rfdata)
saveRDS(randomForest3vars,"./cache/randomForest3vars.RDS")
}else{
randomForest3vars = readRDS("./cache/randomForest3vars.RDS")
}
if(!file.exists("./cache/randomForest5vars.RDS"))
{
randomForest5vars = myrandomForest(num_vars = top5vars,rfdata)
saveRDS(randomForest5vars,"./cache/randomForest5vars.RDS")
}else{
randomForest5vars = readRDS("./cache/randomForest5vars.RDS")
}
if(!file.exists("./cache/randomForest10vars.RDS"))
{
randomForest10vars = myrandomForest(num_vars = top10vars,rfdata)
saveRDS(randomForest10vars,"./cache/randomForest10vars.RDS")
}else{
randomForest10vars = readRDS("./cache/randomForest10vars.RDS")
}
##########           SVM          #########
if(!file.exists("./cache/SVM3vars.RDS"))
{
SVM3vars = mySVM(num_vars = top3vars,rfdata)
saveRDS(SVM3vars,"./cache/SVM3vars.RDS")
}else{
SVM3vars = readRDS("./cache/SVM3vars.RDS")
}
if(!file.exists("./cache/SVM5vars.RDS"))
{
SVM5vars = mySVM(num_vars = top5vars,rfdata)
saveRDS(SVM5vars,"./cache/SVM5vars.RDS")
}else{
SVM5vars = readRDS("./cache/SVM5vars.RDS")
}
if(!file.exists("./cache/SVM10vars.RDS"))
{
SVM10vars = mySVM(num_vars = top10vars,rfdata)
saveRDS(SVM10vars,"./cache/SVM10vars.RDS")
}else{
SVM10vars = readRDS("./cache/SVM10vars.RDS")
}
####NaiveBayes#######################################################
if(!file.exists("./cache/NaiveBayes3vars.RDS"))
{
NaiveBayes3vars = myNaiveBayes(num_vars = top3vars,rfdata)
saveRDS(NaiveBayes3vars,"./cache/NaiveBayes3vars.RDS")
}else{
NaiveBayes3vars = readRDS("./cache/NaiveBayes3vars.RDS")
}
if(!file.exists("./cache/NaiveBayes5vars.RDS"))
{
NaiveBayes5vars = myNaiveBayes(num_vars = top5vars,rfdata)
saveRDS(NaiveBayes5vars,"./cache/NaiveBayes5vars.RDS")
}else{
NaiveBayes5vars = readRDS("./cache/NaiveBayes5vars.RDS")
}
if(!file.exists("./cache/NaiveBayes10vars.RDS"))
{
NaiveBayes10vars = myNaiveBayes(num_vars = top10vars,rfdata)
saveRDS(NaiveBayes10vars,"./cache/NaiveBayes10vars.RDS")
}else{
NaiveBayes10vars = readRDS("./cache/NaiveBayes10vars.RDS")
}
resultTable = matrix(0,ncol=2,nrow=9)
resultTable[1,1] = randomForest3vars$Without_eff$Accuracy
resultTable[1,2] = randomForest3vars$With_eff$Accuracy
resultTable[2,1] = randomForest5vars$Without_eff$Accuracy
resultTable[2,2] = randomForest5vars$With_eff$Accuracy
resultTable[3,1] = randomForest10vars$Without_eff$Accuracy
resultTable[3,2] = randomForest10vars$With_eff$Accuracy
resultTable[4,1] = SVM3vars$Without_eff$Accuracy
resultTable[4,2] = SVM3vars$With_eff$Accuracy
resultTable[5,1] = SVM5vars$Without_eff$Accuracy
resultTable[5,2] = SVM5vars$With_eff$Accuracy
resultTable[6,1] = SVM10vars$Without_eff$Accuracy
resultTable[6,2] = SVM10vars$With_eff$Accuracy
resultTable[7,1] = NaiveBayes3vars$Without_eff$Accuracy
resultTable[7,2] = NaiveBayes3vars$With_eff$Accuracy
resultTable[8,1] = NaiveBayes5vars$Without_eff$Accuracy
resultTable[8,2] = NaiveBayes5vars$With_eff$Accuracy
resultTable[9,1] = NaiveBayes10vars$Without_eff$Accuracy
resultTable[9,2] = NaiveBayes10vars$With_eff$Accuracy
resultTable = as.data.frame(resultTable)
rownames(resultTable) = c(paste0("randomForest",c(3,5,10),"vars"),
paste0("SVM",c(3,5,10),"vars"),
paste0("NaiveBayes",c(3,5,10),"vars"))
colnames(resultTable) = c("accuracy_without_eff","accuracy_with_eff")
print(resultTable)
randomForest3vars = myrandomForest(num_vars = top3vars,rfdata)
source("./creative/myRandomForest.R")
source("./creative/mysvm.r")
source("./creative/myNaiveBayes.r")
randomForest3vars = myrandomForest(num_vars = top3vars,rfdata)
randomForest3vars = myRandomForest(num_vars = top3vars,rfdata)
save.image()
library(plyr)
library(dplyr)
randomForest3vars = myrandomForest(num_vars = top3vars,rfdata)
randomForest3vars = myRandomForest(num_vars = top3vars,rfdata)
SVM3vars = mySVM(num_vars = top3vars,rfdata)
NaiveBayes3vars = myNaiveBayes(num_vars = top3vars,rfdata)
devtools::install_github("topepo/caret")
source('~/Documents/second_article_new/creative/mytrain.R')
tmp = mytrain(rfdata = rfdata,num_vars = top5vars)
source('~/Documents/second_article_new/creative/mytrain.R')
tmp = mytrain(rfdata = rfdata,num_vars = top5vars)
where
options()
library(caret)
trainIndex = createDataPartition(rfdata$Would_be_ST,p=0.75,list = FALSE)
train_data = rfdata[trainIndex,]
test_data = rfdata[-trainIndex,]
var_eff = grepl("eff",num_vars)
formula_without_eff = paste(c("Would_be_ST~"),
paste(num_vars[!var_eff],collapse = "+"))
formula_with_eff = paste(c("Would_be_ST~"),
paste(c(num_vars[!var_eff],"eff"),collapse = "+"))
num_vars = top5vars
var_eff = grepl("eff",num_vars)
formula_without_eff = paste(c("Would_be_ST~"),
paste(num_vars[!var_eff],collapse = "+"))
formula_with_eff = paste(c("Would_be_ST~"),
paste(c(num_vars[!var_eff],"eff"),collapse = "+"))
fit_without_eff <- train(  as.formula(formula_without_eff),
method = "svmRadial",
preProc = c("center", "scale"),
tuneLength = 8,
#metric = "ROC",
data = rfdata)
warnings()
rownames(rfdata)
fit_without_eff
pred_without_eff = predict(fit_without_eff,newdata = test_data)
source('~/Documents/second_article_new/creative/mytrain.R')
mytrain(rfdata = rfdata,num_vars = top5vars)
library(plyr)
library(dplyr)
if(!file.exists("./cache/corps_with_eff.RDS"))
{
source("./creative/get_corps_with_eff.r")
source("./creative/sbm.gurobi.r")
system.time(corps_with_eff <- get_corps_with_eff(corps))
corps_with_eff = corps_with_eff[corps_with_eff$eff>0,]
}else
corps_with_eff = readRDS("./cache/corps_with_eff.RDS")
ttests = corps_with_eff %>%
group_by(year) %>%
do(ttest = t.test(eff~Would_be_ST,data = .))
#year = ttests$year
extract_info_from_ttest = function(x)
{
t = x$statistic
df = x$parameter
p.value = x$p.value
estimates = x$estimate
estimates_name = names(estimates)
info = data.frame(t = t,df=df,estimates[1],estimates[2],p.value=p.value)
names(info) = c("t","df",estimates_name,"p.value")
info
}
ttest_info = lapply(X = ttests$ttest,FUN = extract_info_from_ttest)
ttest_info = do.call(rbind,ttest_info)
ttest_info = cbind(ttests$year,ttest_info)
names(ttest_info)[1] = "year"
rownames(ttest_info) = NULL
ttest_info
#使用第三种取样的方法，取得样本
#rfdata = getSamples3(corps_with_eff)
#     if(!file.exists("./cache/feature_selection_model.RDS"))
#     {
#         source("./creative/select_feature.r")
#         system.time(feature_selection_model <- select_feature(rfdata))
#     }else{
#         feature_selection_model = readRDS("./cache/feature_selection_model.RDS")
#     }
# print(feature_selection_model)
# plot(feature_selection_model,type = c('o','g'))
source("./creative/select_feature.r")
source("./creative/getSamples2.r")
source("./creative/getSamples3.R")
source("./creative/getSamples4.R")
#rfdata = getSample4(corps_with_eff)
feature_selection_results = list()
for(ind in 1:5)
{
rfdata = getSamples4(corps_with_eff)
feature_selection_model <- select_feature(rfdata)
tmp = list()
tmp$optVariables = feature_selection_model$optVariables
tmp$optsize = feature_selection_model$optsize
feature_selection_results[[ind]] = tmp
}
optvariables_list = lapply(X = feature_selection_results,function(x){x[[1]]})
optvariables = do.call(cbind,optvariables_list)
vars5 = lapply(optvariables_list,function(x)x[1:5])
vars10 = lapply(optvariables_list,function(x)x[1:10])
top5vars = Reduce(dplyr::intersect,vars5)
top10vars = Reduce(dplyr::intersect,vars10)
save.image()
source("./creative/mytrain.R")
results5DF = mytrain(num_vars = top5vars,rfdata = rfdata)
results10DF = mytrain(num_vars = top10vars,rfdata = rfdata)
save.image()
results10DF
results10DF ->results10DF.backup
save.image()
source("./creative/mytrain.R")
results5DF = mytrain(num_vars = top5vars,rfdata = rfdata)
results10DF = mytrain(num_vars = top10vars,rfdata = rfdata)
save.image()
results5DF
source("./creative/mytrain.R")
results5DF = mytrain(num_vars = top5vars,rfdata = rfdata)
results10DF = mytrain(num_vars = top10vars,rfdata = rfdata)
q
results5DF
results5DF
results10DF
results10DF.backup
#year = ttests$year
ttests = corps_with_eff %>%
group_by(year) %>%
do(ttest = t.test(eff~Would_be_ST,data = .))
#year = ttests$year
extract_info_from_ttest = function(x)
{
t = x$statistic
df = x$parameter
p.value = x$p.value
estimates = x$estimate
estimates_name = names(estimates)
info = data.frame(t = t,df=df,estimates[1],estimates[2],p.value=p.value)
names(info) = c("t","df",estimates_name,"p.value")
info
}
ttest_info = lapply(X = ttests$ttest,FUN = extract_info_from_ttest)
ttest_info = do.call(rbind,ttest_info)
ttest_info = cbind(ttests$year,ttest_info)
names(ttest_info)[1] = "year"
rownames(ttest_info) = NULL
ttest_info
top5vars
results5DF
